if which apk &>/dev/null; then
  alias aa="apk add"
  alias aay="apk add -y"
  alias au="apk update"
fi

if which snap &>/dev/null; then
    alias si="snap install"
    alias ssi="sudo snap install"
fi

export VCPKG_ROOT="$c/vcpkg"
if [ ! -d "$VCPKG_ROOT" ]; then
  unset VCPKG_ROOT
fi

mk_swap() {
    if [ $# -eq 0 ] || [ $# -gt 2 ]; then
        echo "Usage: ${FUNCNAME[0]} <size> [dst=/swapfile]"
        return 1
    fi
    local sudo=
    if [ "$USER" != root ] && [ "$(whoami)" != root ]; then
        sudo=sudo
    fi
    local cur="$($sudo swapon --show)"
    if [ -n "$cur" ]; then
        echo "Swap already exists:" >&2
        echo "$cur" >&2
        return 1
    fi

    local size="$1"; shift
    local dst
    if [ $# -gt 0 ]; then
        dst="$1"; shift
    else
        dst="/swapfile"
    fi
    $sudo fallocate -l "$size" "$dst"
    $sudo chmod 600 "$dst"
    $sudo mkswap "$dst"
    $sudo swapon "$dst"
    $sudo swapon --show
    echo "$dst swap swap defaults 0 0" | $sudo tee -a /etc/fstab
}

install_gcc() {
    local v
    local prefix=/usr/local
    if [ $# -eq 0 ]; then
        v=13.3.0
    else
        v="$1"; shift
        if [ $# -gt 0 ]; then
            prefix="$1"; shift
            if [ $# -ne 0 ]; then
                echo "Usage: ${FUNCNAME[0]} [version=13.2.0 [prefix=/usr/local]]" >&2
                return 1
            fi
        fi
    fi
    wget https://ftp.gnu.org/gnu/gcc/gcc-$v/gcc-$v.tar.gz
    tar -xzf gcc-$v.tar.gz
    cd gcc-$v
    ./contrib/download_prerequisites
    mkdir objdir && cd objdir
    local dir="$prefix/gcc-$v"
    ../configure --prefix=$dir --enable-languages=c,c++ --disable-multilib
    time make -j$(nproc)
    local sudo=
    if [ "$USER" != root ] && [ "$(whoami)" != root ]; then
        sudo=sudo
    fi
    $sudo make install
    export PATH="$dir/bin:$PATH"
    export LD_LIBRARY_PATH="$dir/lib64:$LD_LIBRARY_PATH"
    echo "You may want to add these to your shell profile:" >&2
    echo "export PATH=\"$dir/bin:\$PATH\"" >&2
    echo "export LD_LIBRARY_PATH=\"$dir/lib64:\$LD_LIBRARY_PATH\"" >&2
}

install_cmake() {
    cmake_version="${1:-3.29.2}"
    cmake_stem=cmake-$cmake_version-linux-x86_64
    wget https://github.com/Kitware/CMake/releases/download/v$cmake_version/$cmake_stem.sh
    bash $cmake_stem.sh
    export PATH="$HOME/$cmake_stem/bin:$PATH"
    echo >> ~/.bash_profile
    echo "# Use CMake $cmake_version; see https://github.com/ryan-williams/linux-helpers/blob/main/.pkg-rc" >> ~/.bash_profile
    echo "export PATH=\"\$HOME/$cmake_stem/bin:\$PATH\"" >> ~/.bash_profile
    cmake --version
}

install_nvidia_drivers_ubuntu() {
    if ! which apt &>/dev/null; then
        echo '`apt` not found' >&2
        return 1
    fi
    local sudo=
    if [ "$USER" != root ]; then
        sudo=sudo
    fi
    $sudo apt update -y
    $sudo apt install -y build-essential
    $sudo apt install -y linux-headers-$(uname -r)
    nvidia_driver_pkg="$(apt-cache search nvidia-driver- | grep '^nvidia-driver-[0-9]* - ' | cut -d' ' -f1 | sort -t- -nk3 | tail -n1)"
    if [ -z "$nvidia_driver_pkg" ]; then
        echo "Error looking up nvidia-driver-XXX version" >&2
        return 2
    fi
    $sudo apt install -y "$nvidia_driver_pkg" nvidia-cuda-toolkit
    echo "blacklist nouveau" | $sudo tee /etc/modprobe.d/blacklist-nvidia-nouveau.conf
    $sudo update-initramfs -u
    echo "Rebooting instance"
    $sudo reboot
}
